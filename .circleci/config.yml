version: 2.1

##############################################################################
# Reusables
##############################################################################
build_binary_params: &build_binary_params
  parameters:
    docker_image:
      type: string
      default: ""
    cuda_version:
      type: string
      default: ""
    cudnn_version:
      type: string
      default: "8"
    python_version:
      type: string
      default: ""
    torch_version:
      type: string
      default: ""
  environment:
    DOCKER_IMAGE: << parameters.docker_image >>
    CUDA_VERSION: << parameters.cuda_version >>
    CUDNN_VERSION: << parameters.cudnn_version >>
    PYTHON_VERSION: << parameters.python_version >>
    TORCH_VERSION: << parameters.torch_version >>

commands:
  git_update_submodules: &git_update_submodules
    description: Update submodules of clone
    steps:
      - run:
          name: Update submodule
          command: git submodule sync && git submodule update --init
  setup_env: &setup_env
    description: Setup the build environment
    steps:
      - run:
          name: Install dependencies
          command: |
            # derived environment variables
            export CUDA_VERSION_SHORT=$(echo ${CUDA_VERSION} | sed -E 's/([0-9]+)\.([0-9]+).*/\1.\2/')
            sudo apt-get update -y
            sudo apt-get install -y make
            pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
  build_package: &build_package
    description: Build PyPose package of specified type
    parameters:
      build_tag:
        type: string
        default: "dev"
      dist_type:
        type: string
        default: "bdist_wheel"
      max_jobs:
        type: integer
        default: 1
    steps:
      - run:
          name: Build PyPose package (<< parameters.dist_type >>)
          no_output_timeout: 30m
          command: |
            export MAX_JOBS=<< parameters.max_jobs >>
            mkdir -p dist
            python3 setup.py egg_info --tag-build=<< parameters.build_tag >> << parameters.dist_type >>

##############################################################################
# Job specs
##############################################################################
jobs:
  linux_build_wheel:
    <<: *build_binary_params
    docker:
      - image: cimg/python:<< parameters.python_version >>
    resource_class: large
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - setup_env
      - checkout
      - git_update_submodules
      - build_package
      - store_artifacts:
          path: dist
          destination: wheels
      - persist_to_workspace:
          root: .
          paths: [dist]
  build_docs:
    <<: *build_binary_params
    docker:
      - image: cimg/python:<< parameters.python_version >>
    resource_class: medium
    steps:
      - setup_env
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Build PyPose documentation
          command: |
            pip install dist/pypose-*.whl
            pip install -r requirements/docs.txt
            cd docs
            make dirhtml
            tar -czvf build/docs.tar.gz build/dirhtml/*
      - store_artifacts:
          path: docs/build/docs.tar.gz
          destination: sphinx-docs.tar.gz
      - run:
          name: Trigger pypose.github.io rebuild
          command: |
            curl -X POST -H "Authorization: token ${PYPOSE_ORG_AUTH}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/pypose/pypose.github.io/dispatches \
            -d "{
              \"event_type\": \"circle-ci-build\",
              \"client_payload\": {
                \"job_num\": \"${CIRCLE_BUILD_NUM}\",
                \"file_name\": \"docs.tar.gz\",
                \"pr_num\": \"${CIRCLE_PULL_REQUEST##*/}\"
              }
            }"
  run_tests:
    <<: *build_binary_params
    docker:
      - image: cimg/python:<< parameters.python_version >>
    resource_class: small
    steps:
      - setup_env
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Setup tests
          command: |
            pip install dist/pypose-*.whl
            mkdir pytest-results
            pytest --junitxml=pytest-results/junit.xml
      - store_test_results:
          path: pytest-results

##############################################################################
# Workflows
##############################################################################
workflows:
  version: 2
  build:
    jobs:
      - linux_build_wheel:
          cuda_version: "11.7"
          torch_version: "2.*"
          python_version: "3.9"
      - build_docs:
          requires: [linux_build_wheel]
          cuda_version: "11.7"
          torch_version: "2.*"
          python_version: "3.9"
      - run_tests:
          requires: [linux_build_wheel]
          cuda_version: "11.7"
          torch_version: "2.*"
          python_version: "3.9"
